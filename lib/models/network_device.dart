// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
// โ ๐ก NetworkDevice - Dispositivo monitorado    โ
// โ ๐ง Histรณrico de trรกfego e status de bloqueio โ
// โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ

import 'device_model.dart';
import 'device_traffic.dart';

class NetworkDevice {
  final RouterDevice device;                 // Dados bรกsicos do dispositivo
  final List<DeviceTraffic> trafficHistory;  // Histรณrico de trรกfego diรกrio

  NetworkDevice({
    required this.device,
    List<DeviceTraffic>? trafficHistory,
  }) : trafficHistory = trafficHistory ?? [];

  // ๐ฅ Total de bytes recebidos
  int get totalRx => trafficHistory.fold(0, (sum, t) => sum + t.rxBytes);

  // ๐ค Total de bytes enviados
  int get totalTx => trafficHistory.fold(0, (sum, t) => sum + t.txBytes);

  // โ Adiciona novo registro de trรกfego
  void addTraffic(DeviceTraffic t) {
    trafficHistory.add(t);
  }

  // ๐ซ Verifica se o dispositivo estรก bloqueado
  bool get isBlocked => device.blocked;
}
