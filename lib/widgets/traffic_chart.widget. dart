// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
// ┃ 📈 TrafficChartWidget - Gráfico de tráfego   ┃
// ┃ 🔧 Exibe histórico de download e upload      ┃
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import '../models/device_traffic.dart';

class TrafficChartWidget extends StatelessWidget {
  final List<DeviceTraffic> history;

  const TrafficChartWidget({super.key, required this.history});

  @override
  Widget build(BuildContext context) {
    if (history.isEmpty) {
      return const Center(child: Text('Sem dados de tráfego'));
    }

    return Padding(
      padding: const EdgeInsets.all(16),
      child: BarChart(
        BarChartData(
          alignment: BarChartAlignment.spaceAround,
          maxY: _getMaxY(),
          titlesData: FlTitlesData(
            leftTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: true),
            ),
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                getTitlesWidget: (value, _) {
                  final index = value.toInt();
                  if (index >= history.length) return const SizedBox();
                  return Text(history[index].day.substring(5)); // Ex: '09-12'
                },
              ),
            ),
          ),
          barGroups: _buildBarGroups(),
        ),
      ),
    );
  }

  // 🔢 Gera grupos de barras
  List<BarChartGroupData> _buildBarGroups() {
    return List.generate(history.length, (i) {
      final traffic = history[i];
      return BarChartGroupData(
        x: i,
        barRods: [
          BarChartRodData(
            toY: traffic.rxBytes.toDouble(),
            color: Colors.blue,
            width: 8,
          ),
          BarChartRodData(
            toY: traffic.txBytes.toDouble(),
            color: Colors.green,
            width: 8,
          ),
        ],
        barsSpace: 4,
      );
    });
  }

  // 📊 Define valor máximo do eixo Y
  double _getMaxY() {
    final allValues = history
        .expand((t) => [t.rxBytes, t.txBytes])
        .map((v) => v.toDouble())
        .toList();
    final max = allValues.isEmpty ? 100 : allValues.reduce((a, b) => a > b ? a : b);
    return max * 1.2;
  }
}
