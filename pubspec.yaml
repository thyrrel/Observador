name: Observador

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Flutter (Latest)
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
    
    - name: Verify Flutter installation
      run: |
        flutter --version
        flutter doctor -v
        dart --version
    
    - name: Backup and inspect pubspec.yaml
      run: |
        echo "=== Current pubspec.yaml ==="
        if [ -f "pubspec.yaml" ]; then
          cat pubspec.yaml
          cp pubspec.yaml /tmp/original_pubspec.yaml
        else
          echo "No pubspec.yaml found!"
        fi
    
    - name: Backup project files
      run: |
        echo "=== Backing up important files ==="
        mkdir -p /tmp/backup
        
        # Backup Dart code
        if [ -d "lib" ]; then
          cp -r lib /tmp/backup/
          echo "✓ Backed up lib directory"
        else
          echo "⚠ No lib directory found"
        fi
        
        # Backup assets
        if [ -d "assets" ]; then
          cp -r assets /tmp/backup/
          echo "✓ Backed up assets directory"
        else
          echo "⚠ No assets directory found"
        fi
    
    - name: Create fresh Flutter project
      run: |
        echo "=== Creating new Flutter project ==="
        cd /tmp
        flutter create \
          --project-name observador \
          --org com.example \
          --android-language kotlin \
          --ios-language swift \
          fresh_project
        
        echo "✓ Fresh project created"
    
    - name: Create compatible pubspec.yaml
      run: |
        cd /tmp/fresh_project
        echo "=== Creating compatible pubspec.yaml ==="
        
        # Get current Dart/Flutter versions
        DART_VERSION=$(dart --version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        FLUTTER_VERSION=$(flutter --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        
        echo "Dart version: $DART_VERSION"
        echo "Flutter version: $FLUTTER_VERSION"
        
        # Create a compatible pubspec.yaml
        cat > pubspec.yaml << EOF
        name: observador
        description: Observador Flutter app
        publish_to: 'none'
        version: 1.0.0+1
        
        environment:
          sdk: '>=${DART_VERSION} <4.0.0'
          flutter: ">=${FLUTTER_VERSION}"
        
        dependencies:
          flutter:
            sdk: flutter
          cupertino_icons: ^1.0.2
          http: ^1.1.0
          shared_preferences: ^2.2.2
          url_launcher: ^6.2.1
          
        dev_dependencies:
          flutter_test:
            sdk: flutter
          flutter_lints: ^3.0.0
        
        flutter:
          uses-material-design: true
          
          # Add assets if they exist
          assets:
            - assets/
        EOF
        
        echo "=== New pubspec.yaml created ==="
        cat pubspec.yaml
    
    - name: Restore project files but fix pubspec
      run: |
        echo "=== Restoring files to fresh project ==="
        cd /tmp/fresh_project
        
        # Remove default lib directory and restore ours
        if [ -d "/tmp/backup/lib" ]; then
          rm -rf lib
          cp -r /tmp/backup/lib .
          echo "✓ Restored lib directory"
        fi
        
        # Restore assets
        if [ -d "/tmp/backup/assets" ]; then
          cp -r /tmp/backup/assets .
          echo "✓ Restored assets directory"
        fi
        
        # DON'T restore the original pubspec.yaml - keep the compatible one we created
        echo "⚠ Keeping the compatible pubspec.yaml (not restoring original)"
        
        echo "=== Final project structure ==="
        ls -la
    
    - name: Get Flutter dependencies
      run: |
        cd /tmp/fresh_project
        echo "=== Getting Flutter dependencies ==="
        flutter pub get
        
        echo "=== Dependencies resolved successfully ==="
    
    - name: Clean and build APK
      run: |
        cd /tmp/fresh_project
        echo "=== Cleaning project ==="
        flutter clean
        
        echo "=== Getting dependencies again ==="
        flutter pub get
        
        echo "=== Building APK ==="
        flutter build apk --release --verbose
        
        echo "=== Build completed ==="
        ls -la build/app/outputs/flutter-apk/
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: observador-apk-auto-fix
        path: /tmp/fresh_project/build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
    
    - name: Show APK info
      run: |
        APK_PATH="/tmp/fresh_project/build/app/outputs/flutter-apk/app-release.apk"
        if [ -f "$APK_PATH" ]; then
          echo "=== APK Successfully Built ==="
          ls -lh "$APK_PATH"
          echo "✓ APK is ready for download!"
        else
          echo "❌ APK not found"
          exit 1
        fi
