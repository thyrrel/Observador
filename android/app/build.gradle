def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// ╭──────────────────────────────────────────────╮
// │ 🔑 Configurações de assinatura               │
// ╰──────────────────────────────────────────────╯
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // ╭──────────────────────────────────────────────╮
    // │ 📱 Configurações básicas                     │
    // ╰──────────────────────────────────────────────╯
    namespace "com.thyrrel.observador"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // ╭──────────────────────────────────────────────╮
        // │ 📦 Identificação do app                      │
        // ╰──────────────────────────────────────────────╯
        applicationId "com.thyrrel.observador"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // ╭──────────────────────────────────────────────╮
        // │ 🛡️ Permissões necessárias                   │
        // ╰──────────────────────────────────────────────╯
        multiDexEnabled true
        
        // Para monitoramento de rede
        manifestPlaceholders = [
            appName: "Observador"
        ]
    }

    // ╭──────────────────────────────────────────────╮
    // │ 🔑 Configurações de assinatura               │
    // ╰──────────────────────────────────────────────╯
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // Usar signing config de release se disponível, senão debug
            signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
            
            // Otimizações para release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Configurações adicionais
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
        }
        
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    // ╭──────────────────────────────────────────────╮
    // │ 📦 Configurações do bundle                   │
    // ╰──────────────────────────────────────────────╯
    bundle {
        language {
            enableSplit = false // Manter todas as linguagens no AAB
        }
        density {
            enableSplit = true  // Permitir split por densidade
        }
        abi {
            enableSplit = true  // Permitir split por arquitetura
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    
    // ╭──────────────────────────────────────────────╮
    // │ 📱 Dependências para monitoramento           │
    // ╰──────────────────────────────────────────────╯
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Adicione aqui dependências específicas do Android se necessário
    // Para monitoramento de rede, biometria, etc.
}